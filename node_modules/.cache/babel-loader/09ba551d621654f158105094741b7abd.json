{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport FlippyFooter from './FlippyFooter';\nimport './styles.css';\n\nvar Flippy = function (_React$Component) {\n  _inherits(Flippy, _React$Component);\n\n  function Flippy(props) {\n    _classCallCheck(this, Flippy);\n\n    var _this = _possibleConstructorReturn(this, (Flippy.__proto__ || Object.getPrototypeOf(Flippy)).call(this, props));\n\n    _this.toggle = function () {\n      _this.setState({\n        isFlipped: !_this.state.isFlipped\n      });\n    };\n\n    _this.handleFooterDotClick = function (newCardIndex, event) {\n      _this.setState({\n        isFlipped: newCardIndex === 0\n      });\n    };\n\n    _this.handleHoverOn = function (event) {\n      _this.setState({\n        isFlipped: true\n      });\n\n      _this.props.onMouseEnter(event);\n    };\n\n    _this.handleTouchStart = function (event) {\n      _this.setState({\n        isFlipped: true,\n        isTouchDevice: true\n      });\n\n      _this.props.onTouchStart(event);\n    };\n\n    _this.handleTouchEnd = function (event) {\n      _this.setState({\n        isFlipped: false\n      });\n\n      _this.props.onTouchEnd(event);\n    };\n\n    _this.handleHoverOff = function (event) {\n      _this.setState({\n        isFlipped: false\n      });\n\n      _this.props.onMouseLeave(event);\n    };\n\n    _this.state = {\n      isFlipped: false,\n      isTouchDevice: false\n    };\n    return _this;\n  }\n\n  _createClass(Flippy, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          style = _props.style,\n          flipDirection = _props.flipDirection,\n          flipOnHover = _props.flipOnHover,\n          flipOnClick = _props.flipOnClick;\n      var _state = this.state,\n          isFlipped = _state.isFlipped,\n          activeCardIndex = _state.activeCardIndex,\n          isTouchDevice = _state.isTouchDevice;\n      var methods = !!flipOnHover ? {\n        onMouseEnter: this.handleHoverOn,\n        onMouseLeave: this.handleHoverOff,\n        onTouchStart: this.handleTouchStart,\n        onTouchEnd: this.handleTouchEnd\n      } : flipOnClick ? {\n        onClick: this.toggle\n      } : {};\n      return React.createElement('div', Object.assign({\n        className: 'flippy-container',\n        style: Object.assign({}, style)\n      }, methods), React.createElement('div', {\n        className: 'flippy-cardContainer-wrapper ' + flipDirection\n      }, React.createElement('div', {\n        className: 'flippy-cardContainer ' + (isFlipped ? 'isActive' : '') + ' ' + (isTouchDevice ? 'istouchdevice' : '')\n      }, children), this.props.showNavigation && React.createElement(FlippyFooter, {\n        onDotClick: this.handleFooterDotClick,\n        activeCardIndex: activeCardIndex,\n        cards: this.props.children\n      })));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, state) {\n      return Object.assign({}, state, {\n        isFlipped: typeof props.isFlipped === 'boolean' ? props.isFlipped : state.isFlipped\n      });\n    }\n  }]);\n\n  return Flippy;\n}(React.Component);\n\nexport default Flippy;\nFlippy.defaultProps = {\n  showNavigation: false,\n  flipDirection: 'horizontal',\n  flipOnHover: false,\n  flipOnClick: true,\n  usePrettyStyle: true,\n  onMouseEnter: function onMouseEnter() {},\n  onMouseLeave: function onMouseLeave() {},\n  onTouchStart: function onTouchStart() {},\n  onTouchEnd: function onTouchEnd() {},\n  onClick: function onClick() {}\n};","map":null,"metadata":{},"sourceType":"module"}