{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\n\nvar FlippyCard = function (_React$Component) {\n  _inherits(FlippyCard, _React$Component);\n\n  function FlippyCard() {\n    _classCallCheck(this, FlippyCard);\n\n    return _possibleConstructorReturn(this, (FlippyCard.__proto__ || Object.getPrototypeOf(FlippyCard)).apply(this, arguments));\n  }\n\n  _createClass(FlippyCard, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          className = _props.className,\n          cardType = _props.cardType,\n          style = _props.style,\n          elementType = _props.elementType,\n          animationDuration = _props.animationDuration,\n          rest = _objectWithoutProperties(_props, ['className', 'cardType', 'style', 'elementType', 'animationDuration']);\n\n      return React.createElement(elementType || 'div', Object.assign({\n        className: 'flippy-card flippy-' + cardType + ' ' + (className || '')\n      }, rest, {\n        style: Object.assign({}, style || {}, {\n          transitionDuration: animationDuration / 1000 + 's'\n        })\n      }), this.props.children);\n    }\n  }]);\n\n  return FlippyCard;\n}(React.Component);\n\nvar FrontSide = function FrontSide(_ref) {\n  var isFlipped = _ref.isFlipped,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, ['isFlipped', 'style']),\n      animationDuration = _ref.animationDuration;\n\n  return React.createElement(FlippyCard, Object.assign({}, props, {\n    style: Object.assign({}, style || {}),\n    animationDuration: animationDuration,\n    cardType: 'front'\n  }));\n};\n\nexport { FrontSide };\n\nvar BackSide = function BackSide(_ref2) {\n  var isFlipped = _ref2.isFlipped,\n      style = _ref2.style,\n      props = _objectWithoutProperties(_ref2, ['isFlipped', 'style']);\n\n  return React.createElement(FlippyCard, Object.assign({}, props, {\n    style: Object.assign({}, style || {}),\n    cardType: 'back'\n  }));\n};\n\nexport { BackSide };\nFlippyCard.defaultProps = {\n  animationDuration: 600\n};","map":null,"metadata":{},"sourceType":"module"}